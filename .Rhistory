build(dsamplr)
library(devtools)
build()
install()
dsamplr(100, "normal")
library(dsamplr)
dsamplr(100, "normal")
a <- dsamplr(100, "normal")
summary(a)
a <- A$sample
a <- a$sample
a
library(dsamplr)
devtools::use_vignette("my-vignette")
?dsamplr
??dsamplr
library(dsamplr)
build()
build()
install()
library(dsamplr)
?dsamplr
library(dsamplr)
?dsamplr
library(dsamplr)
?dsamplr
library(dsamplr)
library(dsamplr)
?dsamplr
?summary.dsamplr
R.home(component = "home")
library(dsamplr)
library(devtools)
build()
check()
check()
check()
library(dsamplr)
library(dsamplr)
library(dsamplr)
check()
check()
check()
check()
check()
build()
library("tidyverse")
###Players from our data set###
freethrows <- read.csv("U:/Projects/coding-test-R/free_throws.csv", header=TRUE)
players <- freethrows %>%
group_by(player) %>%
summarise(throws = n(), made = sum(shot_made), missed = (throws - made), percentage = sum(shot_made)/n())
players$player <- as.character(players$player)
###
playerseason <- freethrows %>%
group_by(player, season) %>%
summarise(throws = n(), made = sum(shot_made), missed = (throws - made), percentage = sum(shot_made)/n())
###
library(plotly)
library(shiny)
library(DT)
#Add filters to shrink data set to most interesting players.
ui <- fluidPage(
mainPanel(
DT::dataTableOutput("players"),
plotlyOutput("plot"), width = 12
)
)
server <- function(input, output, session){
output$players <- renderDT({
datatable(players, selection = 'single', filter = 'top') %>%
formatRound('percentage', 3)
})
output$plot <- renderPlotly({
#s <- event_data("plotly_click", source = "players")
s <- input$players_rows_selected
if (length(s)) {
a <- players[[s,1]]
p <- playerseason %>%
filter(player == a[[1]]) %>%
ggplot(aes(season, percentage, group = 1)) + geom_point() + geom_path()
ggplotly(p)
} else {
plotly_empty(type = "scatter")
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
mainPanel(
DT::dataTableOutput("players"),
plotlyOutput("plot"), width = 12
)
)
server <- function(input, output, session){
output$players <- renderDT({
datatable(players, selection = 'single', filter = 'top') %>%
formatRound('percentage', 3)
})
output$plot <- renderPlotly({
#s <- event_data("plotly_click", source = "players")
s <- input$players_rows_selected
if (length(s)) {
a <- players[[s,1]]
p <- playerseason %>%
filter(player == a[[1]]) %>%
ggplot(aes(season, percentage, group = 1)) + geom_point() + geom_path()
ggplotly(p)
} else {
plotly_empty(type = "scatter")
}
})
}
shinyApp(ui, server)
library("tidyverse")
###Players from our data set###
freethrows <- read.csv("U:/Projects/coding-test-R/free_throws.csv", header=TRUE)
players <- freethrows %>%
group_by(player) %>%
summarise(throws = n(), made = sum(shot_made), missed = (throws - made), percentage = sum(shot_made)/n())
players$player <- as.character(players$player)
playerseason <- freethrows %>%
group_by(player, season) %>%
summarise(throws = n(), made = sum(shot_made), missed = (throws - made), percentage = sum(shot_made)/n())
###
library(plotly)
library(shiny)
library(DT)
ui <- fluidPage(
mainPanel(
DT::dataTableOutput("players"),
plotlyOutput("plot"), width = 12
)
)
server <- function(input, output, session){
output$players <- renderDT({
datatable(players, selection = 'single', filter = 'top') %>%
formatRound('percentage', 3)
})
output$plot <- renderPlotly({
#s <- event_data("plotly_click", source = "players")
s <- input$players_rows_selected
if (length(s)) {
a <- players[[s,1]]
p <- playerseason %>%
filter(player == a[[1]]) %>%
ggplot(aes(season, percentage, group = 1)) + geom_point() + geom_path()
ggplotly(p)
} else {
plotly_empty(type = "scatter")
}
})
}
shinyApp(ui, server)
